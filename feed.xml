<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-02-06T11:01:02+01:00</updated><id>/feed.xml</id><title type="html">Ivan Cuenca Rigging</title><subtitle>Hi there! My name is Iván Cuenca Ruiz, and I am a 3D Rigging artist. Check out my website to see my latest work and don&apos;t hesitate to contact me if you have any questions.</subtitle><author><name>Iván Cuenca Ruiz</name></author><entry><title type="html">Bifrost non linear blendshape</title><link href="/2023/11/02/nonLinearBlendshape.html" rel="alternate" type="text/html" title="Bifrost non linear blendshape" /><published>2023-11-02T00:00:00+01:00</published><updated>2023-11-02T00:00:00+01:00</updated><id>/2023/11/02/nonLinearBlendshape</id><content type="html" xml:base="/2023/11/02/nonLinearBlendshape.html"><![CDATA[<p><img src="\assets\images\posts\bifrostNonLinearBlendshape\example_01.gif" alt="non linear blendshape gif" /></p>

<h1 id="quadratic-spline-interpolation">Quadratic spline interpolation</h1>

<p>The quadratic spline interpolation is a method used in mathematics to approximate a smooth curve or function that passes through a set of given data points.</p>

<p>In our case we will be dealing with 3 different shapes, the <strong>base</strong> or <strong>B</strong>, the <strong>target</strong> or <strong>T</strong> and the <strong>middle</strong> or <strong>M</strong>.</p>

<p>The <strong>M</strong> will be calculated automatically finding the middle position and adjusting it with a matrix transformation.</p>

<p><br /></p>

<h1 id="result">Result</h1>
<p>In this example, you can see how the adjustment of the matrix works, by translating, rotating, and scaling.
<img class="img-medium" src="\assets\images\posts\bifrostNonLinearBlendshape\example_02.gif" alt="non linear blendshape example 03 gif" /></p>

<p><br /></p>

<h1 id="bifrosts">Bifrosts</h1>
<p>If you’re not interested in the Bifrost node part or simply want to try it out, at the end of the post, you’ll find a download button with the cube scene.</p>

<p><br /></p>

<p>To manipulate the vertices of a geometry in Bifrost, you must access to their point positions. When dealing with the base and target shapes, the process is straightforward: you can directly connect the geometry inputs to the <strong>get_point_position</strong> node.</p>

<p>To calculate the middle shape’s point positions, as mentioned earlier, we will apply the following formula:</p>
<p class="frame"> (B + A) / 2 </p>

<p><img class="img-medium" src="\assets\images\posts\bifrostNonLinearBlendshape\middle_pp.png" alt="middle points positions graph" /></p>

<p>Now that we have obtained the point positions for <strong>B</strong>, <strong>T</strong>, and <strong>M</strong>, it’s important to note that if we use these three shapes for the quadratic spline, the result will look like a typical blendshape with linear interpolation.</p>

<p>To solve this, we will use the matrix of a locator and add its position to <strong>M</strong>. It’s important to consider that if we add the locator’s matrix to all the vertices, the entire geometry will shift. To avoid this, we will identify the vertices that have been moved (delta) by using the formula (B-A). Then, we will calculate the length of each vector, determine the maximum length among all vectors, and normalize all the vectors based on this maximum value, so the normalized lengths will be “length/max_length.”
<img class="img-medium" src="\assets\images\posts\bifrostNonLinearBlendshape\normalized_lengths.png" alt="normalized lengths graph" /></p>

<p>Now that we have the normalized lengths, we need the matrix of the locator, as we want to be able to tweak the pivot I also added a inverseMatrix, to multiply the <strong>M</strong> by the matrix we need to convert the vector 3 of the <strong>M</strong> point positions to a vector 4, it is important to set the W to 1 or it won’t work, once we have the multiplication we convert it back again to vector 3.</p>

<p><img class="img-medium" src="\assets\images\posts\bifrostNonLinearBlendshape\matrix_multiply.png" alt="matrix multiply graph" /></p>

<p>Lastly, with <strong>M</strong> (mid_pp), normalized lengths (for_each), and the matrix (vector3_to_vector5), we have to subtract <strong>M</strong> from the matrix. Then, we will multiply it by the normalized lengths and, finally, add <strong>M</strong> back to obtain our correct <strong>M</strong>.</p>

<p><img class="img-medium" src="\assets\images\posts\bifrostNonLinearBlendshape\m_result.png" alt="correct M result graph" /></p>

<p><br /></p>

<h1 id="quadratic-spline-formula">Quadratic spline formula</h1>

<p class="frame"> S(v) = T(2v^2 - v) + M(-4v^2 + 4v) + B( 2v^2 - 3v + 1) </p>

<p>v = Value of the blendshape (0 to 1)</p>

<p>S = Final shape</p>

<p>T = Target shape</p>

<p>M = Middle shape</p>

<p>B = Base shape</p>

<p><img src="\assets\images\posts\bifrostNonLinearBlendshape\quadratic_spline.png" alt="quadratic spline graph" /></p>

<p>As shown in this graph, you just need to follow the formula. Remember that to see the result, you need to convert your point positions back to a geometry using the <strong>set_point_position</strong> node.”</p>

<p><br /></p>

<h1 id="source-links">Source links</h1>

<ul>
  <li>
    <p><a href="https://youtu.be/KHxUX1V-z-M?si=OmGTTenWxF-lILxF">Alexandre Alin</a> – (Quadratic spline with 3 targets - base, middle and target)</p>
  </li>
  <li>
    <p><a href="https://cgfromspace.blogspot.com/2013/02/face-rigging-tutorial-non-linear-shape.html">C.G. From SPACE</a> – (Post with the maths)</p>
  </li>
  <li>
    <p><a href="https://www.linkedin.com/posts/peck-kanjanasahas-a704672b_continue-experimenting-more-on-bifrost-this-activity-7124218131006324737-WTWG?utm_source=share&amp;utm_medium=member_desktop">Peck Kanjanasahas</a> – (Another example of bifrost compound using a vector for the bulge effect)</p>
  </li>
</ul>

<p><br /></p>]]></content><author><name>Iván Cuenca Ruiz</name></author><summary type="html"><![CDATA[How to use a quadratic spline interpolation for a blendshape.]]></summary></entry><entry><title type="html">Bifrost pose reader</title><link href="/2023/04/12/bifrostPoseReader.html" rel="alternate" type="text/html" title="Bifrost pose reader" /><published>2023-04-12T00:00:00+02:00</published><updated>2023-04-12T00:00:00+02:00</updated><id>/2023/04/12/bifrostPoseReader</id><content type="html" xml:base="/2023/04/12/bifrostPoseReader.html"><![CDATA[<p><img src="\assets\images\posts\bifrostPoseReader\thumbnail.gif" alt="barycentric gif" /></p>

<p><br /></p>

<h1 id="barycentric-coordinate-system">Barycentric coordinate system</h1>
<p>The barycentric coordinates are a way of expressing the location of a point within a triangle using proportions based on areas. It’s like dividing the triangle into smaller areas and using those areas to describe where the point is in relation to them. This is known as areal coordinates and it’s a simple way to understand how a point is positioned within a triangle using only area ratios.</p>

<p>So once we have 3 points (<strong>ABC</strong>) and a point (<strong>P</strong>) we can calculate the area of <strong>ABC</strong>, <strong>PAB</strong>, <strong>PBC</strong> and <strong>PCA</strong>.</p>

<p><img class="img-small" src="/assets/images/posts/bifrostPoseReader/ABCP.png" alt="triangles ABCP" /></p>

<p>Once you have the area of each triangle, you can then use these values to determine the barycentric coordinates of <strong>P</strong>.</p>

<ul>
  <li>The barycentric coordinate for point <strong>P</strong> with respect to vertex <strong>A</strong> = Area(<strong>PBC</strong>) / Area(<strong>ABC</strong>)</li>
  <li>The barycentric coordinate for point <strong>P</strong> with respect to vertex <strong>B</strong> = Area(<strong>PCA</strong>) / Area(<strong>ABC</strong>)</li>
  <li>The barycentric coordinate for point <strong>P</strong> with respect to vertex <strong>C</strong> = Area(<strong>PAB</strong>) / Area(<strong>ABC</strong>)</li>
</ul>

<p><br /></p>

<h1 id="inputs">INPUTS</h1>
<ul>
  <li>Geometry <strong>triangulated</strong></li>
  <li>Driver: transform / locator</li>
</ul>

<p><br /></p>

<h1 id="steps">STEPS</h1>
<ol>
  <li><a href="#step-1">Find the projected point (<strong>P</strong>) on the geometry using a vector</a></li>
  <li><a href="#step-2">Determine the face on which point <strong>P</strong> is located</a></li>
  <li><a href="#step-3">Extract the vertices of the face where we are <strong>ABC</strong></a></li>
  <li><a href="#step-4">Calculate the areas of <strong>ABC</strong>, <strong>PBC</strong>, <strong>PCA</strong>, <strong>PAB</strong></a></li>
  <li><a href="#step-5">Output</a></li>
</ol>

<p><br /></p>

<h2 id="step-1">Find the projected point (P) on the geometry using a vector</h2>

<p>In order to find point <strong>P</strong>, we’ll need our driver, which is placed in the geometry’s center and a direction vector. This vector can be passed as value (1, 0, 0) if we want to use the X axis or we can have an input in our bifrost node so we can decide which axis we want to use.</p>

<p><img class="img-medium" src="/assets/images/posts/bifrostPoseReader/vector.gif" alt="vector gif" /></p>

<p>To project <strong>p</strong> onto the geometry, we’ll use the node <strong>get_raycast_locations</strong>. This node needs to be given the inputs as lists. Therefore, we’ll use <strong>build_array</strong> to turn our data into lists.</p>

<ul>
  <li>mesh → “get_raycast_locations.geometry”</li>
  <li>translation → “get_raycast_locations.positions”</li>
  <li>vector dirección → “get_raycast_locations.directions”</li>
</ul>

<p>Once our <strong>get_raycast_locations</strong> is working, we’ll need to access the point <strong>p</strong>. To do this, we must use the node <strong>sample_property</strong>. The sample_data is the output we’re looking for.</p>
<ul>
  <li>mesh → “sample_property.geometry”</li>
  <li>“get_raycast_locations.locations” → “sample_property.locations”</li>
</ul>

<p><img src="/assets/images/posts/bifrostPoseReader/raycast_graph.png" alt="raycast bifrost graph" /></p>

<p><br /></p>

<h2 id="step-2">Determine the face on which point P is located</h2>

<p>To determine the closest face, we’ll use the <strong>get_closest_locations</strong> node. This node provides us valuable information, such as the closest vertex or the closest face. To extract this information, we’ll create a <strong>value</strong> node and set its type as <strong>GeoLocation</strong>.</p>

<p><img class="img-small" src="/assets/images/posts/bifrostPoseReader/geoLocation_value_node.png" alt="geoLocation value node" /></p>

<p>The output is a list, so we’ll use the <strong>first_in_array</strong> node to get the first value.</p>

<p><img src="/assets/images/posts/bifrostPoseReader/closest_face_graph.png" alt="closest face graph" /></p>

<p><br /></p>

<h2 id="step-3">Extract the vertices of the face where we are ABC</h2>

<p>To obtain the 3 vertices that form our face, we need to use the <strong>get_mesh_structure</strong> node.</p>

<p><img src="/assets/images/posts/bifrostPoseReader/face_vertex_graph.png" alt="face vertex graph" /></p>

<p><br /></p>

<h2 id="step-4">Calculate the areas of ABC, PBC, PCA, PAB</h2>

<p>This step may seem very complex, but it’ss as simple as looking for the formula on the internet and applying it with bifrost nodes. The area formula for a triangle is the following:</p>

<p class="frame"> | (B - A) x (C - A) | / 2 </p>

<p>We need to calculate the area of <strong>ABC</strong>, <strong>PBC</strong>, <strong>PCA</strong>, <strong>PAB</strong></p>

<p><img src="/assets/images/posts/bifrostPoseReader/area_graph.png" alt="area graph" /></p>

<p><br /></p>

<h2 id="step-5">Output</h2>

<p>As we said at the beginning of the post, once we have all the areas, the only thing we need to do is to divide the areas by the area of <strong>ABC</strong>.
So, for example, the weight of <strong>A</strong> = Area(<strong>PBC</strong>) / Area(<strong>ABC</strong>).</p>

<p>Apart from that, in the image you can see the way I’ve found to create an empty array and fill it only with the values of the vertex of the face we are on.</p>

<p><img src="/assets/images/posts/bifrostPoseReader/output.png" alt="output" /></p>

<p><br /></p>

<p>The sum of all our weights must be equal to 1 and, since they are values between 0 and 1, we can use them to trigger our blendshapes directly.</p>

<p><br /></p>

<p>I am providing the example scene for download, you can find all the weights connected in the driver, so if you rotate the locator, you’ll see the output.</p>]]></content><author><name>Iván Cuenca Ruiz</name></author><summary type="html"><![CDATA[How to create a pose reader applying the barycentric coordinate system.]]></summary></entry></feed>